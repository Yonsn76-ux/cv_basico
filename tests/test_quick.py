#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Prueba r√°pida del sistema de clasificaci√≥n de CVs
"""

import os
from cv_processor import CVProcessor
from cv_classifier import CVClassifier

def test_basic_functionality():
    """Prueba b√°sica del sistema"""
    print("üß™ Iniciando prueba b√°sica del sistema...")
    
    # 1. Probar procesador de CVs
    print("\n1Ô∏è‚É£ Probando procesador de CVs...")
    processor = CVProcessor()
    
    # Verificar formatos soportados
    test_files = [
        "test.pdf",
        "test.docx", 
        "test.jpg",
        "test.txt"
    ]
    
    for file in test_files:
        is_supported = processor.is_supported_file(file)
        status = "‚úÖ" if is_supported else "‚ùå"
        print(f"   {status} {file}: {'Soportado' if is_supported else 'No soportado'}")
    
    # 2. Probar clasificador
    print("\n2Ô∏è‚É£ Probando clasificador...")
    classifier = CVClassifier()
    
    # Crear datos de prueba simulados
    fake_cv_data = [
        {
            'file_name': 'cv_agronomo_test.txt',
            'profession': 'Agr√≥nomo',
            'text': 'ingeniero agr√≥nomo experiencia cultivos agricultura riego fertilizantes maquinaria agr√≠cola',
            'features': {},
            'status': 'success'
        },
        {
            'file_name': 'cv_software_test.txt', 
            'profession': 'Ingeniero de Software',
            'text': 'desarrollador software python java javascript react node.js bases de datos programaci√≥n',
            'features': {},
            'status': 'success'
        }
    ]
    
    try:
        print("   ü§ñ Entrenando modelo de prueba...")
        results = classifier.train_model(fake_cv_data, model_type='logistic_regression')
        print(f"   ‚úÖ Entrenamiento exitoso - Precisi√≥n: {results['accuracy']:.1%}")
        
        # Probar predicci√≥n
        test_text = "soy ingeniero agr√≥nomo con experiencia en cultivos de ma√≠z y sistemas de riego"
        prediction = classifier.predict_cv(test_text)
        
        if not prediction['error']:
            print(f"   ‚úÖ Predicci√≥n exitosa: {prediction['predicted_profession']} ({prediction['confidence_percentage']})")
        else:
            print(f"   ‚ùå Error en predicci√≥n: {prediction['message']}")
            
    except Exception as e:
        print(f"   ‚ùå Error en clasificador: {e}")
    
    # 3. Verificar CVs de ejemplo
    print("\n3Ô∏è‚É£ Verificando CVs de ejemplo...")
    sample_dir = "sample_cvs"
    
    if os.path.exists(sample_dir):
        professions = os.listdir(sample_dir)
        print(f"   ‚úÖ Directorio de ejemplos encontrado")
        print(f"   üìÅ Profesiones disponibles: {len(professions)}")
        
        for profession in professions:
            prof_dir = os.path.join(sample_dir, profession)
            if os.path.isdir(prof_dir):
                files = os.listdir(prof_dir)
                print(f"      ‚Ä¢ {profession}: {len(files)} CVs")
    else:
        print("   ‚ö†Ô∏è  Directorio de ejemplos no encontrado")
        print("      Ejecuta: python sample_generator.py")
    
    print("\nüéâ Prueba b√°sica completada!")
    return True

def test_gui_imports():
    """Prueba las importaciones de la GUI"""
    print("\nüñ•Ô∏è Probando importaciones de la GUI...")
    
    try:
        from PyQt6.QtWidgets import QApplication
        print("   ‚úÖ PyQt6.QtWidgets")
        
        from PyQt6.QtCore import Qt
        print("   ‚úÖ PyQt6.QtCore")
        
        from PyQt6.QtGui import QFont, QColor
        print("   ‚úÖ PyQt6.QtGui")
        
        print("   ‚úÖ Todas las importaciones de GUI exitosas")
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Error en importaciones: {e}")
        return False

def main():
    """Funci√≥n principal de prueba"""
    print("=" * 50)
    print("üß™ PRUEBA R√ÅPIDA - CV CLASSIFIER v2.0")
    print("=" * 50)
    
    # Probar funcionalidad b√°sica
    basic_ok = test_basic_functionality()
    
    # Probar GUI
    gui_ok = test_gui_imports()
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 50)
    
    print(f"Funcionalidad b√°sica: {'‚úÖ OK' if basic_ok else '‚ùå ERROR'}")
    print(f"Importaciones GUI: {'‚úÖ OK' if gui_ok else '‚ùå ERROR'}")
    
    if basic_ok and gui_ok:
        print("\nüéâ ¬°Sistema listo para usar!")
        print("   Ejecuta: python main_gui.py")
    else:
        print("\n‚ö†Ô∏è  Hay problemas que resolver:")
        if not basic_ok:
            print("   ‚Ä¢ Revisar dependencias b√°sicas")
        if not gui_ok:
            print("   ‚Ä¢ Instalar PyQt6: pip install PyQt6")
    
    return 0 if (basic_ok and gui_ok) else 1

if __name__ == "__main__":
    import sys
    sys.exit(main())
